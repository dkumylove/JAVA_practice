package 붕어빵만들기;

// 붕어빵을 만들기 위한 틀
public class 붕어빵 {
	/** 멤버변수 ( 이 클래스에 소속사되었다. 멤버라 부름)
	 변수(붕어빵 클래스에 저장된 데이터를 보관하는 공간)
	 데이터 티입 변수명 = 실제 사용할 데이터; */
	
	// 밀가루반죽
	String 붕어빵_바깥쪽 = "밀가루 반죽";
	// 맛있는 소(앙금)
	String 붕어빵_안쪽 = "팥앙금";
	// 먹을사람
	String 먹을_사람;
	// 먹는방법
	String 먹는_방법;
	
	/** .붕어빵을 처음 새로  만들태 무조건 불러서
	 .위의 멤버변수에 값을 저장해주는 메소드
	 .초기화 메소드라고 하고 이 메소드를 생성자라고 한다.
	 .무조건 객체가 만들어질 때 new와 같이 불러진다
	 # 생성자 선언법 :
	 클래서명(멤버변수에 저장할 데이터 변수들....){
	 .......기능들
	 }*/
	// {}코드블럭
	붕어빵(String 붕어빵을_먹을사람, 
		String 붕어빵_반죽, 
		String 붕어빵_안에_소,
		String 붕어빵_처음_먹는){
		먹을_사람 = 붕어빵을_먹을사람;
		붕어빵_바깥쪽 = 붕어빵_반죽;
		붕어빵_안쪽 = 붕어빵_안에_소;
		먹는_방법 = 붕어빵_처음_먹는;
	}
	
	// 이 메소드라고 하는 것도 이틀과 연관이 있어야 한다.
	// 그래서 멤버 메소드라 부들다
	// 행동( 이틀과 관련되어서만 동작이 실행되니까 메소드)
	
	// 붕어땅틀에 재로를 집어 넣는다.
	void 붕어빵_틀에_재료를_넣는다() {
		System.out.println(붕어빵_바깥쪽 + "을 집어 넣는다.");
		System.out.println(붕어빵_안쪽 + "을 집어 넣는다.");
		System.out.println("밀가루 반죽을 덮어준다.");
	}

	// 붕어빵을 구워준다
	void 붕어빵을_구워준다() {
		System.out.println("붕어빵을_구워준다.");
	}

	// 잘구워진 붕어빵을_꺼낸다.
	void 붕어빵을_꺼낸다() {
		System.out.println("잘구워진 붕어빵을 꺼낸다");
	}

	// 잘 구워진 붕어빵을 맛있게 먹는다
	void 붕어빵을_맛있게_먹는다() {
		System.out.println
		(먹을_사람 + "이(가) 잘구워진 붕어빵을 " + 먹는_방법 + " 맛있게 먹는다.");
	}

	// 자바는 만들어진 애플리케이션을 실행하려면 main()메소드가
	// 반드시 있어야함니다. 형식은 아래예제를 따릅니다.
	// public : main()를누구나 실행할수있다
	// static : main()를 한번만 실항한다. 이후 붕아빵은
	// 계속 붕어빵 클래스를 사용하여 반복해서 만들수 있다
	// void : 실행후에 남는것(=결과값)을 없음
	// main : 자바의 약속, 무조건 실행하는 메소드의 이름
	// 이것은 자바의 문법입니다.
	// 파라미터 : 매개변수
	// [] :배열
	// String[] : 문자열들 = 배열이라고 부름
	// 배열은 여러 변수들을 한개의 대표이름으로 부르고
	// 각각의 데이터는 차례 번호로 구분하다
	// ex) String[1], String[2]
	// args : 문자열들(=문자열 배열)의 대표 변수형
	public static void main(String[] args) {

		/* 붕어빵틀(=붕어빵 클래서)를 이용해서 붕어땅을 만듭시다
		붕어팡객체의 데이터형을 선언합니다.
		만들어진 붕어빵 객체의 이름을 선언합니다.
		컴퓨터 메모리에 방을 만든다는 뜻입니다.
		붕어빵들(붕어빵 클래스)를 이용해서
		따끈따끈한 새(=new) 붕어빵을 만든다.
		*/
		
		// 내붕어빵 만들기
		붕어빵 내붕어빵 = new 붕어빵("나", "밀가루 분죽", "팥앙금", "머리부터");
		
		// 객체와 관련되었다는 뜻으로.을 사용합니다.
		내붕어빵.붕어빵_틀에_재료를_넣는다();
		내붕어빵.붕어빵을_구워준다();
		내붕어빵.붕어빵을_꺼낸다();
		내붕어빵.붕어빵을_맛있게_먹는다();
		System.out.println("(●'◡'●)");
		
		// 동생붕어빵 만들기
		붕어빵 동생붕어빵 = new 붕어빵("동생", "쌀 반죽", "슈앙금", "꼬리부터");
		
		동생붕어빵.붕어빵_틀에_재료를_넣는다();
		동생붕어빵.붕어빵을_구워준다();
		동생붕어빵.붕어빵을_꺼낸다();
		동생붕어빵.붕어빵을_맛있게_먹는다();
		System.out.println("(●'◡'●)");
		
		// 누나붕어빵 만들기
		붕어빵 누나붕어빵 = new 붕어빵("누나", "쌀 반죽", "팥앙금", "반을 잘라");
		
		누나붕어빵.붕어빵_틀에_재료를_넣는다();
		누나붕어빵.붕어빵을_구워준다();
		누나붕어빵.붕어빵을_꺼낸다();
		누나붕어빵.붕어빵을_맛있게_먹는다();
		System.out.println("(●'◡'●)");
		
	}

	// 이 메소드라고 하는 것도 이틀과 연고이 있어야한다.
	// 그래서 멤버 메소드라고 부른단
	// 행동 (이 틀과 관련지어서만 동작이 생행되니깐 메소드
}
